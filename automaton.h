#pragma once

using namespace std;


// ?????????? ? ??????????? ?????????? ?????? ????????? ????????
template<typename State, typename Alphabet>
class FiniteAutomaton {

public:

    // ??????????? ??????, ???????????????? ????????? ???
    FiniteAutomaton
    (
        const vector<State>& states,
        const vector<Alphabet>& alphabet,
        const State& initial,
        const State & final,
        const map<pair<State, Alphabet>, State>& transitions

    ) : states(states), alphabet(alphabet), initial(initial), final(final), transitions(transitions) {}

    // ??????? ????? ?????? ??? ???????? ?????? ?? ?????? ?????????? ??????? ???????(?? ??????) ???????? 
    bool checkString(const vector<Alphabet>& input) const {
        State currentState = initial;

        // ???????? ?? ???????? ??????? ??????
        for (const auto& symbol : input) {
            // ????? ???????? ??? ???????? ????????? ? ???????
            auto transition = transitions.find({ currentState, symbol });

            // ???? ??????? ??????, ????????? ??????? ?????????
            if (transition != transitions.end()) {
                currentState = transition->second;
            }


            else {

                return false;  // ? ?????? ?????????? ????????, ?????????? false (?????? ?? ????????????? ???????? ????????)
            }
        }


        return currentState == final; // ?????????? true, ???? ???????? ????????? ??????????
    }


private:

    vector<State> states; // ?????? ????????? ????????

    vector<Alphabet> alphabet; // ?????? ???????? ????????

    State initial; // ????????? ?????????

    State final;   // ???????? ?????????

    map<pair<State, Alphabet>, State> transitions; // ??????? ?????????

};
